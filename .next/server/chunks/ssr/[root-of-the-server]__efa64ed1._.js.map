{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/google-genai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/ai/flows/explain-astronomical-concepts.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Explains astronomical concepts related to space objects using AI.\n *\n * - explainAstronomicalConcept - A function that takes a space object's name and returns a simplified explanation.\n * - ExplainAstronomicalConceptInput - The input type for the explainAstronomicalConcept function.\n * - ExplainAstronomicalConceptOutput - The return type for the explainAstronomicalConcept function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ExplainAstronomicalConceptInputSchema = z.object({\n  objectName: z.string().describe('The name of the space object to explain.'),\n  language: z.string().describe('The language for the response (e.g., \"Spanish\", \"English\").'),\n});\nexport type ExplainAstronomicalConceptInput = z.infer<typeof ExplainAstronomicalConceptInputSchema>;\n\nconst ExplainAstronomicalConceptOutputSchema = z.object({\n  explanation: z.string().describe('A simplified explanation of the space object, its properties, orbit, and potential impact risks.'),\n});\nexport type ExplainAstronomicalConceptOutput = z.infer<typeof ExplainAstronomicalConceptOutputSchema>;\n\nexport async function explainAstronomicalConcept(input: ExplainAstronomicalConceptInput): Promise<ExplainAstronomicalConceptOutput> {\n  return explainAstronomicalConceptFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'explainAstronomicalConceptPrompt',\n  input: {schema: ExplainAstronomicalConceptInputSchema},\n  output: {schema: ExplainAstronomicalConceptOutputSchema},\n  prompt: `You are an expert in astronomy and a great science communicator. Your task is to explain the following space object.\n\n**Instructions:**\n- **Language:** Always respond in **{{{language}}}**.\n- **Tone:** Use simple, clear, and engaging language. Avoid technical jargon.\n- **Length:** Keep the explanation concise, around 2-3 short paragraphs.\n\nExplain the object, its properties, orbit, and potential impact risks in a way that anyone can understand.\n\nObject Name: {{{objectName}}}`,\n});\n\nconst explainAstronomicalConceptFlow = ai.defineFlow({\n    name: 'explainAstronomicalConceptFlow',\n    inputSchema: ExplainAstronomicalConceptInputSchema,\n    outputSchema: ExplainAstronomicalConceptOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,2BAA2B,KAAsC;IACrF,OAAO,+BAA+B;AACxC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAqC;IACrD,QAAQ;QAAC,QAAQ;IAAsC;IACvD,QAAQ,CAAC;;;;;;;;;6BASkB,CAAC;AAC9B;AAEA,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAAC;IACjD,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 359, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/ai/flows/evaluate-hypothetical-scenario.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Evaluates a hypothetical scenario about a space object using AI.\n *\n * - evaluateHypotheticalScenario - A function that takes a space object's name and a scenario, and returns an evaluation.\n * - EvaluateHypotheticalScenarioInput - The input type for the function.\n * - EvaluateHypotheticalScenarioOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst EvaluateHypotheticalScenarioInputSchema = z.object({\n  objectName: z.string().describe('The name of the space object.'),\n  scenario: z.string().describe('The hypothetical scenario to evaluate.'),\n  language: z.string().describe('The language for the response (e.g., \"Spanish\", \"English\").'),\n});\nexport type EvaluateHypotheticalScenarioInput = z.infer<typeof EvaluateHypotheticalScenarioInputSchema>;\n\nconst EvaluateHypotheticalScenarioOutputSchema = z.object({\n  evaluation: z.string().describe('A scientifically-plausible evaluation of the hypothetical scenario.'),\n});\nexport type EvaluateHypotheticalScenarioOutput = z.infer<typeof EvaluateHypotheticalScenarioOutputSchema>;\n\nexport async function evaluateHypotheticalScenario(input: EvaluateHypotheticalScenarioInput): Promise<EvaluateHypotheticalScenarioOutput> {\n  return evaluateHypotheticalScenarioFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'evaluateHypotheticalScenarioPrompt',\n  input: {schema: EvaluateHypotheticalScenarioInputSchema},\n  output: {schema: EvaluateHypotheticalScenarioOutputSchema},\n  prompt: `You are an expert astrophysicist with a creative flair and you are a great science communicator. Your task is to evaluate a hypothetical scenario.\n\n**Instructions:**\n- **Language:** Always respond in **{{{language}}}**.\n- **Tone:** Be creative but ground your answer in scientific principles. Use clear and simple language.\n- **Length:** Keep the evaluation concise and to the point (2-3 short paragraphs).\n\nGiven a space object and a hypothetical scenario, provide a plausible and engaging evaluation of what might happen.\n\nSpace Object: {{{objectName}}}\nHypothetical Scenario: What if... {{{scenario}}}`,\n});\n\nconst evaluateHypotheticalScenarioFlow = ai.defineFlow({\n    name: 'evaluateHypotheticalScenarioFlow',\n    inputSchema: EvaluateHypotheticalScenarioInputSchema,\n    outputSchema: EvaluateHypotheticalScenarioOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,0CAA0C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,2CAA2C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAGO,eAAe,6BAA6B,KAAwC;IACzF,OAAO,iCAAiC;AAC1C;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAuC;IACvD,QAAQ;QAAC,QAAQ;IAAwC;IACzD,QAAQ,CAAC;;;;;;;;;;gDAUqC,CAAC;AACjD;AAEA,MAAM,mCAAmC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAAC;IACnD,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA7BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/ai/flows/generate-quiz-question.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Generates a multiple-choice quiz question about a given astronomical category.\n *\n * - generateQuizQuestion - A function that takes a category and returns a question, options, answer, and explanation.\n * - GenerateQuizQuestionInput - The input type for the function.\n * - GenerateQuizQuestionOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateQuizQuestionInputSchema = z.object({\n  category: z.string().describe('The category of the astronomy question (e.g., \"Comets\", \"Asteroids\").'),\n  language: z.string().describe('The language for the response (e.g., \"Spanish\", \"English\").'),\n});\nexport type GenerateQuizQuestionInput = z.infer<typeof GenerateQuizQuestionInputSchema>;\n\nconst GenerateQuizQuestionOutputSchema = z.object({\n  question: z.string().describe('The generated multiple-choice question.'),\n  options: z.array(z.string()).describe('An array of 4-5 plausible options for the question.'),\n  correctAnswer: z.string().describe('The correct answer from the options array.'),\n  explanation: z.string().describe('A brief explanation of why the correct answer is right.'),\n});\nexport type GenerateQuizQuestionOutput = z.infer<typeof GenerateQuizQuestionOutputSchema>;\n\nexport async function generateQuizQuestion(input: GenerateQuizQuestionInput): Promise<GenerateQuizQuestionOutput> {\n  return generateQuizQuestionFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateQuizQuestionPrompt',\n  input: {schema: GenerateQuizQuestionInputSchema},\n  output: {schema: GenerateQuizQuestionOutputSchema},\n  prompt: `You are an astronomy expert creating a fun and educational quiz. Your task is to generate a single multiple-choice question.\n\n**Instructions:**\n- **Language:** Always respond in **{{{language}}}**.\n- **Category:** The question must be about **{{{category}}}**.\n- **Difficulty:** The question should be challenging but not obscure. Suitable for an enthusiastic amateur.\n- **Options:** Provide 4 plausible options. Only one can be correct.\n- **Explanation:** Provide a concise, clear explanation for the correct answer.\n\nGenerate one question based on the category: {{{category}}}`,\n});\n\nconst generateQuizQuestionFlow = ai.defineFlow({\n    name: 'generateQuizQuestionFlow',\n    inputSchema: GenerateQuizQuestionInputSchema,\n    outputSchema: GenerateQuizQuestionOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IACtC,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA+B;IAC/C,QAAQ;QAAC,QAAQ;IAAgC;IACjD,QAAQ,CAAC;;;;;;;;;2DASgD,CAAC;AAC5D;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAAC;IAC3C,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 498, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/ai/flows/generate-hypothetical-question.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Generates a random hypothetical question about a space object using AI.\n *\n * - generateHypotheticalQuestion - A function that takes a space object's name and returns a random question.\n * - GenerateHypotheticalQuestionInput - The input type for the function.\n * - GenerateHypotheticalQuestionOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateHypotheticalQuestionInputSchema = z.object({\n  objectName: z.string().describe('The name of the space object.'),\n  language: z.string().describe('The language for the response (e.g., \"Spanish\", \"English\").'),\n});\nexport type GenerateHypotheticalQuestionInput = z.infer<typeof GenerateHypotheticalQuestionInputSchema>;\n\nconst GenerateHypotheticalQuestionOutputSchema = z.object({\n  question: z.string().describe('A random hypothetical question about the space object.'),\n});\nexport type GenerateHypotheticalQuestionOutput = z.infer<typeof GenerateHypotheticalQuestionOutputSchema>;\n\nexport async function generateHypotheticalQuestion(input: GenerateHypotheticalQuestionInput): Promise<GenerateHypotheticalQuestionOutput> {\n  return generateHypotheticalQuestionFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateHypotheticalQuestionPrompt',\n  input: {schema: GenerateHypotheticalQuestionInputSchema},\n  output: {schema: GenerateHypotheticalQuestionOutputSchema},\n  prompt: `You are an imaginative astrophysicist who loves to spark curiosity. Your task is to generate a single, random, and thought-provoking hypothetical question about a given space object.\n\n**Instructions:**\n- **Language:** Always generate the question in **{{{language}}}**.\n- **Tone:** Be creative, inspiring, and slightly playful. The question should be a 'what if' scenario.\n- **Format:** Return only the question, without any preamble or extra text.\n- **Example (if object is 'Earth'):** \"What if Earth had two moons?\"\n\n**Space Object:** {{{objectName}}} `,\n});\n\nconst generateHypotheticalQuestionFlow = ai.defineFlow({\n    name: 'generateHypotheticalQuestionFlow',\n    inputSchema: GenerateHypotheticalQuestionInputSchema,\n    outputSchema: GenerateHypotheticalQuestionOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,0CAA0C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,2CAA2C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,6BAA6B,KAAwC;IACzF,OAAO,iCAAiC;AAC1C;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAuC;IACvD,QAAQ;QAAC,QAAQ;IAAwC;IACzD,QAAQ,CAAC;;;;;;;;mCAQwB,CAAC;AACpC;AAEA,MAAM,mCAAmC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAAC;IACnD,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA3BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 564, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport { explainAstronomicalConcept } from '@/ai/flows/explain-astronomical-concepts';\nimport { evaluateHypotheticalScenario } from '@/ai/flows/evaluate-hypothetical-scenario';\nimport { generateQuizQuestion, type GenerateQuizQuestionOutput } from '@/ai/flows/generate-quiz-question';\nimport { generateHypotheticalQuestion } from '@/ai/flows/generate-hypothetical-question';\n\n\nexport type ExplanationState = {\n  success: boolean;\n  explanation?: string;\n  error?: string;\n};\n\nexport async function getExplanation(\n  prevState: ExplanationState,\n  formData: FormData\n): Promise<ExplanationState> {\n  const objectName = formData.get('objectName') as string;\n  const language = formData.get('language') as string;\n\n  try {\n    if (!objectName) {\n      return { success: false, error: 'Object name is required.' };\n    }\n    const result = await explainAstronomicalConcept({ objectName, language });\n    return { success: true, explanation: result.explanation };\n  } catch (error) {\n    console.error('Error in getExplanation action:', error);\n    return { success: false, error: 'An unexpected error occurred while generating the explanation.' };\n  }\n}\n\nexport type ScenarioState = {\n  success: boolean;\n  evaluation?: string;\n  error?: string;\n};\n\nexport async function getHypotheticalScenario(\n  prevState: ScenarioState,\n  formData: FormData\n): Promise<ScenarioState> {\n  const objectName = formData.get('objectName') as string;\n  const scenario = formData.get('scenario') as string;\n  const language = formData.get('language') as string;\n  \n  try {\n    if (!objectName || !scenario) {\n      return { success: false, error: 'Object name and scenario are required.' };\n    }\n    const result = await evaluateHypotheticalScenario({ objectName, scenario, language });\n    return { success: true, evaluation: result.evaluation };\n  } catch (error) {\n    console.error('Error in getHypotheticalScenario action:', error);\n    return { success: false, error: 'An unexpected error occurred while evaluating the scenario.' };\n  }\n}\n\n\nexport type QuizQuestionState = {\n  success: boolean;\n  questions?: GenerateQuizQuestionOutput[];\n  error?: string;\n};\n\nexport async function getQuizQuestions(\n  prevState: QuizQuestionState,\n  formData: FormData\n): Promise<QuizQuestionState> {\n  const category = formData.get('category') as string;\n  const language = formData.get('language') as string;\n  const count = 3;\n  \n  try {\n    if (!category) {\n      return { success: false, error: 'Category is required.' };\n    }\n    const questionPromises = Array.from({ length: count }, () => \n      generateQuizQuestion({ category, language })\n    );\n\n    const results = await Promise.all(questionPromises);\n    \n    return { success: true, questions: results };\n  } catch (error) {\n    console.error('Error in getQuizQuestions action:', error);\n    return { success: false, error: 'An unexpected error occurred while generating the questions.' };\n  }\n}\n\nexport type QuestionState = {\n  success: boolean;\n  question?: string;\n  error?: string;\n};\n\nexport async function getRandomQuestion(\n  prevState: QuestionState,\n  formData: FormData\n): Promise<QuestionState> {\n  const objectName = formData.get('objectName') as string;\n  const language = formData.get('language') as string;\n  \n  try {\n    if (!objectName) {\n      return { success: false, error: 'Object name is required.' };\n    }\n    const result = await generateHypotheticalQuestion({ objectName, language });\n    return { success: true, question: result.question };\n  } catch (error) {\n    console.error('Error in getRandomQuestion action:', error);\n    return { success: false, error: 'An unexpected error occurred while generating the question.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;AASO,eAAe,eACpB,SAA2B,EAC3B,QAAkB;IAElB,MAAM,aAAa,SAAS,GAAG,CAAC;IAChC,MAAM,WAAW,SAAS,GAAG,CAAC;IAE9B,IAAI;QACF,IAAI,CAAC,YAAY;YACf,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAA2B;QAC7D;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,yJAAA,CAAA,6BAA0B,AAAD,EAAE;YAAE;YAAY;QAAS;QACvE,OAAO;YAAE,SAAS;YAAM,aAAa,OAAO,WAAW;QAAC;IAC1D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO;YAAE,SAAS;YAAO,OAAO;QAAiE;IACnG;AACF;AAQO,eAAe,wBACpB,SAAwB,EACxB,QAAkB;IAElB,MAAM,aAAa,SAAS,GAAG,CAAC;IAChC,MAAM,WAAW,SAAS,GAAG,CAAC;IAC9B,MAAM,WAAW,SAAS,GAAG,CAAC;IAE9B,IAAI;QACF,IAAI,CAAC,cAAc,CAAC,UAAU;YAC5B,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAyC;QAC3E;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,0JAAA,CAAA,+BAA4B,AAAD,EAAE;YAAE;YAAY;YAAU;QAAS;QACnF,OAAO;YAAE,SAAS;YAAM,YAAY,OAAO,UAAU;QAAC;IACxD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,OAAO;YAAE,SAAS;YAAO,OAAO;QAA8D;IAChG;AACF;AASO,eAAe,iBACpB,SAA4B,EAC5B,QAAkB;IAElB,MAAM,WAAW,SAAS,GAAG,CAAC;IAC9B,MAAM,WAAW,SAAS,GAAG,CAAC;IAC9B,MAAM,QAAQ;IAEd,IAAI;QACF,IAAI,CAAC,UAAU;YACb,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAwB;QAC1D;QACA,MAAM,mBAAmB,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAM,GAAG,IACrD,CAAA,GAAA,kJAAA,CAAA,uBAAoB,AAAD,EAAE;gBAAE;gBAAU;YAAS;QAG5C,MAAM,UAAU,MAAM,QAAQ,GAAG,CAAC;QAElC,OAAO;YAAE,SAAS;YAAM,WAAW;QAAQ;IAC7C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO;YAAE,SAAS;YAAO,OAAO;QAA+D;IACjG;AACF;AAQO,eAAe,kBACpB,SAAwB,EACxB,QAAkB;IAElB,MAAM,aAAa,SAAS,GAAG,CAAC;IAChC,MAAM,WAAW,SAAS,GAAG,CAAC;IAE9B,IAAI;QACF,IAAI,CAAC,YAAY;YACf,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAA2B;QAC7D;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,0JAAA,CAAA,+BAA4B,AAAD,EAAE;YAAE;YAAY;QAAS;QACzE,OAAO;YAAE,SAAS;YAAM,UAAU,OAAO,QAAQ;QAAC;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO;YAAE,SAAS;YAAO,OAAO;QAA8D;IAChG;AACF;;;IApGsB;IAyBA;IA2BA;IA+BA;;AAnFA,+OAAA;AAyBA,+OAAA;AA2BA,+OAAA;AA+BA,+OAAA","debugId":null}},
    {"offset": {"line": 710, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getHypotheticalScenario as '60d3402cad185968b7d2aa31332d53c09fa4924180'} from 'ACTIONS_MODULE0'\nexport {getRandomQuestion as '6000027ee9ba0e057c3671cff8137599ea85700789'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 765, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 779, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 793, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}