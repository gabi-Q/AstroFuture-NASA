{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/google-genai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/ai/flows/explain-astronomical-concepts.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Explains astronomical concepts related to space objects using AI.\n *\n * - explainAstronomicalConcept - A function that takes a space object's name and returns a simplified explanation.\n * - ExplainAstronomicalConceptInput - The input type for the explainAstronomicalConcept function.\n * - ExplainAstronomicalConceptOutput - The return type for the explainAstronomicalConcept function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ExplainAstronomicalConceptInputSchema = z.object({\n  objectName: z.string().describe('The name of the space object to explain.'),\n  language: z.string().describe('The language for the response (e.g., \"Spanish\", \"English\").'),\n});\nexport type ExplainAstronomicalConceptInput = z.infer<typeof ExplainAstronomicalConceptInputSchema>;\n\nconst ExplainAstronomicalConceptOutputSchema = z.object({\n  explanation: z.string().describe('A simplified explanation of the space object, its properties, orbit, and potential impact risks.'),\n});\nexport type ExplainAstronomicalConceptOutput = z.infer<typeof ExplainAstronomicalConceptOutputSchema>;\n\nexport async function explainAstronomicalConcept(input: ExplainAstronomicalConceptInput): Promise<ExplainAstronomicalConceptOutput> {\n  return explainAstronomicalConceptFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'explainAstronomicalConceptPrompt',\n  input: {schema: ExplainAstronomicalConceptInputSchema},\n  output: {schema: ExplainAstronomicalConceptOutputSchema},\n  prompt: `You are an expert in astronomy and a great science communicator. Your task is to explain the following space object.\n\n**Instructions:**\n- **Language:** Always respond in **{{{language}}}**.\n- **Tone:** Use simple, clear, and engaging language. Avoid technical jargon.\n- **Length:** Keep the explanation concise, around 2-3 short paragraphs.\n\nExplain the object, its properties, orbit, and potential impact risks in a way that anyone can understand.\n\nObject Name: {{{objectName}}}`,\n});\n\nconst explainAstronomicalConceptFlow = ai.defineFlow({\n    name: 'explainAstronomicalConceptFlow',\n    inputSchema: ExplainAstronomicalConceptInputSchema,\n    outputSchema: ExplainAstronomicalConceptOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,2BAA2B,KAAsC;IACrF,OAAO,+BAA+B;AACxC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAqC;IACrD,QAAQ;QAAC,QAAQ;IAAsC;IACvD,QAAQ,CAAC;;;;;;;;;6BASkB,CAAC;AAC9B;AAEA,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAAC;IACjD,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 359, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/ai/flows/evaluate-hypothetical-scenario.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Evaluates a hypothetical scenario about a space object using AI.\n *\n * - evaluateHypotheticalScenario - A function that takes a space object's name and a scenario, and returns an evaluation.\n * - EvaluateHypotheticalScenarioInput - The input type for the function.\n * - EvaluateHypotheticalScenarioOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst EvaluateHypotheticalScenarioInputSchema = z.object({\n  objectName: z.string().describe('The name of the space object.'),\n  scenario: z.string().describe('The hypothetical scenario to evaluate.'),\n  language: z.string().describe('The language for the response (e.g., \"Spanish\", \"English\").'),\n});\nexport type EvaluateHypotheticalScenarioInput = z.infer<typeof EvaluateHypotheticalScenarioInputSchema>;\n\nconst EvaluateHypotheticalScenarioOutputSchema = z.object({\n  evaluation: z.string().describe('A scientifically-plausible evaluation of the hypothetical scenario.'),\n});\nexport type EvaluateHypotheticalScenarioOutput = z.infer<typeof EvaluateHypotheticalScenarioOutputSchema>;\n\nexport async function evaluateHypotheticalScenario(input: EvaluateHypotheticalScenarioInput): Promise<EvaluateHypotheticalScenarioOutput> {\n  return evaluateHypotheticalScenarioFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'evaluateHypotheticalScenarioPrompt',\n  input: {schema: EvaluateHypotheticalScenarioInputSchema},\n  output: {schema: EvaluateHypotheticalScenarioOutputSchema},\n  prompt: `You are an expert astrophysicist with a creative flair and you are a great science communicator. Your task is to evaluate a hypothetical scenario.\n\n**Instructions:**\n- **Language:** Always respond in **{{{language}}}**.\n- **Tone:** Be creative but ground your answer in scientific principles. Use clear and simple language.\n- **Length:** Keep the evaluation concise and to the point (2-3 short paragraphs).\n\nGiven a space object and a hypothetical scenario, provide a plausible and engaging evaluation of what might happen.\n\nSpace Object: {{{objectName}}}\nHypothetical Scenario: What if... {{{scenario}}}`,\n});\n\nconst evaluateHypotheticalScenarioFlow = ai.defineFlow({\n    name: 'evaluateHypotheticalScenarioFlow',\n    inputSchema: EvaluateHypotheticalScenarioInputSchema,\n    outputSchema: EvaluateHypotheticalScenarioOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,0CAA0C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,2CAA2C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxD,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAGO,eAAe,6BAA6B,KAAwC;IACzF,OAAO,iCAAiC;AAC1C;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAuC;IACvD,QAAQ;QAAC,QAAQ;IAAwC;IACzD,QAAQ,CAAC;;;;;;;;;;gDAUqC,CAAC;AACjD;AAEA,MAAM,mCAAmC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAAC;IACnD,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA7BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/ai/flows/generate-quiz-question.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Generates a multiple-choice quiz question about a given astronomical category.\n *\n * - generateQuizQuestion - A function that takes a category and returns a question, options, answer, and explanation.\n * - GenerateQuizQuestionInput - The input type for the function.\n * - GenerateQuizQuestionOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateQuizQuestionInputSchema = z.object({\n  category: z.string().describe('The category of the astronomy question (e.g., \"Comets\", \"Asteroids\").'),\n  language: z.string().describe('The language for the response (e.g., \"Spanish\", \"English\").'),\n});\nexport type GenerateQuizQuestionInput = z.infer<typeof GenerateQuizQuestionInputSchema>;\n\nconst GenerateQuizQuestionOutputSchema = z.object({\n  question: z.string().describe('The generated multiple-choice question.'),\n  options: z.array(z.string()).describe('An array of 4-5 plausible options for the question.'),\n  correctAnswer: z.string().describe('The correct answer from the options array.'),\n  explanation: z.string().describe('A brief explanation of why the correct answer is right.'),\n});\nexport type GenerateQuizQuestionOutput = z.infer<typeof GenerateQuizQuestionOutputSchema>;\n\nexport async function generateQuizQuestion(input: GenerateQuizQuestionInput): Promise<GenerateQuizQuestionOutput> {\n  return generateQuizQuestionFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateQuizQuestionPrompt',\n  input: {schema: GenerateQuizQuestionInputSchema},\n  output: {schema: GenerateQuizQuestionOutputSchema},\n  prompt: `You are an astronomy expert creating a fun and educational quiz. Your task is to generate a single multiple-choice question.\n\n**Instructions:**\n- **Language:** Always respond in **{{{language}}}**.\n- **Category:** The question must be about **{{{category}}}**.\n- **Difficulty:** The question should be challenging but not obscure. Suitable for an enthusiastic amateur.\n- **Options:** Provide 4 plausible options. Only one can be correct.\n- **Explanation:** Provide a concise, clear explanation for the correct answer.\n\nGenerate one question based on the category: {{{category}}}`,\n});\n\nconst generateQuizQuestionFlow = ai.defineFlow({\n    name: 'generateQuizQuestionFlow',\n    inputSchema: GenerateQuizQuestionInputSchema,\n    outputSchema: GenerateQuizQuestionOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IACtC,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA+B;IAC/C,QAAQ;QAAC,QAAQ;IAAgC;IACjD,QAAQ,CAAC;;;;;;;;;2DASgD,CAAC;AAC5D;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAAC;IAC3C,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 498, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport { explainAstronomicalConcept } from '@/ai/flows/explain-astronomical-concepts';\nimport { evaluateHypotheticalScenario } from '@/ai/flows/evaluate-hypothetical-scenario';\nimport { generateQuizQuestion, type GenerateQuizQuestionOutput } from '@/ai/flows/generate-quiz-question';\n\n\nexport type ExplanationState = {\n  success: boolean;\n  explanation?: string;\n  error?: string;\n};\n\nexport async function getExplanation(\n  prevState: ExplanationState,\n  formData: FormData\n): Promise<ExplanationState> {\n  const objectName = formData.get('objectName') as string;\n  const language = formData.get('language') as string;\n\n  try {\n    if (!objectName) {\n      return { success: false, error: 'Object name is required.' };\n    }\n    const result = await explainAstronomicalConcept({ objectName, language });\n    return { success: true, explanation: result.explanation };\n  } catch (error) {\n    console.error('Error in getExplanation action:', error);\n    return { success: false, error: 'An unexpected error occurred while generating the explanation.' };\n  }\n}\n\nexport type ScenarioState = {\n  success: boolean;\n  evaluation?: string;\n  error?: string;\n};\n\nexport async function getHypotheticalScenario(\n  prevState: ScenarioState,\n  formData: FormData\n): Promise<ScenarioState> {\n  const objectName = formData.get('objectName') as string;\n  const scenario = formData.get('scenario') as string;\n  const language = formData.get('language') as string;\n  \n  try {\n    if (!objectName || !scenario) {\n      return { success: false, error: 'Object name and scenario are required.' };\n    }\n    const result = await evaluateHypotheticalScenario({ objectName, scenario, language });\n    return { success: true, evaluation: result.evaluation };\n  } catch (error) {\n    console.error('Error in getHypotheticalScenario action:', error);\n    return { success: false, error: 'An unexpected error occurred while evaluating the scenario.' };\n  }\n}\n\n\nexport type QuizQuestionState = {\n  success: boolean;\n  questions?: GenerateQuizQuestionOutput[];\n  error?: string;\n};\n\nexport async function getQuizQuestions(\n  prevState: QuizQuestionState,\n  formData: FormData\n): Promise<QuizQuestionState> {\n  const category = formData.get('category') as string;\n  const language = formData.get('language') as string;\n  const count = 3;\n  \n  try {\n    if (!category) {\n      return { success: false, error: 'Category is required.' };\n    }\n    const questionPromises = Array.from({ length: count }, () => \n      generateQuizQuestion({ category, language })\n    );\n\n    const results = await Promise.all(questionPromises);\n    \n    return { success: true, questions: results };\n  } catch (error) {\n    console.error('Error in getQuizQuestions action:', error);\n    return { success: false, error: 'An unexpected error occurred while generating the questions.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AACA;;;;;;;AASO,eAAe,eACpB,SAA2B,EAC3B,QAAkB;IAElB,MAAM,aAAa,SAAS,GAAG,CAAC;IAChC,MAAM,WAAW,SAAS,GAAG,CAAC;IAE9B,IAAI;QACF,IAAI,CAAC,YAAY;YACf,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAA2B;QAC7D;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,yJAAA,CAAA,6BAA0B,AAAD,EAAE;YAAE;YAAY;QAAS;QACvE,OAAO;YAAE,SAAS;YAAM,aAAa,OAAO,WAAW;QAAC;IAC1D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO;YAAE,SAAS;YAAO,OAAO;QAAiE;IACnG;AACF;AAQO,eAAe,wBACpB,SAAwB,EACxB,QAAkB;IAElB,MAAM,aAAa,SAAS,GAAG,CAAC;IAChC,MAAM,WAAW,SAAS,GAAG,CAAC;IAC9B,MAAM,WAAW,SAAS,GAAG,CAAC;IAE9B,IAAI;QACF,IAAI,CAAC,cAAc,CAAC,UAAU;YAC5B,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAyC;QAC3E;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,0JAAA,CAAA,+BAA4B,AAAD,EAAE;YAAE;YAAY;YAAU;QAAS;QACnF,OAAO;YAAE,SAAS;YAAM,YAAY,OAAO,UAAU;QAAC;IACxD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,OAAO;YAAE,SAAS;YAAO,OAAO;QAA8D;IAChG;AACF;AASO,eAAe,iBACpB,SAA4B,EAC5B,QAAkB;IAElB,MAAM,WAAW,SAAS,GAAG,CAAC;IAC9B,MAAM,WAAW,SAAS,GAAG,CAAC;IAC9B,MAAM,QAAQ;IAEd,IAAI;QACF,IAAI,CAAC,UAAU;YACb,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAwB;QAC1D;QACA,MAAM,mBAAmB,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAM,GAAG,IACrD,CAAA,GAAA,kJAAA,CAAA,uBAAoB,AAAD,EAAE;gBAAE;gBAAU;YAAS;QAG5C,MAAM,UAAU,MAAM,QAAQ,GAAG,CAAC;QAElC,OAAO;YAAE,SAAS;YAAM,WAAW;QAAQ;IAC7C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO;YAAE,SAAS;YAAO,OAAO;QAA+D;IACjG;AACF;;;IA3EsB;IAyBA;IA2BA;;AApDA,+OAAA;AAyBA,+OAAA;AA2BA,+OAAA","debugId":null}},
    {"offset": {"line": 613, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/.next-internal/server/app/explorer/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getExplanation as '603cf8121ebaba394d2d6b3ced48ee69ca56d9fb99'} from 'ACTIONS_MODULE0'\nexport {getHypotheticalScenario as '60d3402cad185968b7d2aa31332d53c09fa4924180'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 668, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/components/cosmic-explorer/main-view.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const MainView = registerClientReference(\n    function() { throw new Error(\"Attempted to call MainView() from the server but MainView is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/cosmic-explorer/main-view.tsx <module evaluation>\",\n    \"MainView\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,8EACA","debugId":null}},
    {"offset": {"line": 682, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/components/cosmic-explorer/main-view.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const MainView = registerClientReference(\n    function() { throw new Error(\"Attempted to call MainView() from the server but MainView is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/cosmic-explorer/main-view.tsx\",\n    \"MainView\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,0DACA","debugId":null}},
    {"offset": {"line": 696, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 711, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/lib/placeholder-images.ts"],"sourcesContent":["import data from './placeholder-images.json';\n\nexport type ImagePlaceholder = {\n  id: string;\n  description: string;\n  imageUrl: string;\n  imageHint: string;\n};\n\nexport const PlaceHolderImages: ImagePlaceholder[] = data.placeholderImages;\n"],"names":[],"mappings":";;;AAAA;;AASO,MAAM,oBAAwC,2GAAA,CAAA,UAAI,CAAC,iBAAiB","debugId":null}},
    {"offset": {"line": 723, "column": 0}, "map": {"version":3,"sources":["file:///home/user/AstroFuture-NASA/src/app/explorer/page.tsx"],"sourcesContent":["import { MainView } from '@/components/cosmic-explorer/main-view';\nimport { PlaceHolderImages } from '@/lib/placeholder-images';\nimport type { ImagePlaceholder } from '@/lib/placeholder-images';\nimport type { SpaceObject } from '@/lib/types';\nimport { format, subDays, startOfDay, endOfDay } from 'date-fns';\n\nfunction getFallbackData(): SpaceObject[] {\n  const imageMap = new Map<string, ImagePlaceholder>(PlaceHolderImages.map((img) => [img.id, img]));\n  \n  const fallbackObjects: SpaceObject[] = [\n    {\n      id: 'fallback-1',\n      name: '(433) Eros',\n      type: 'Asteroid',\n      diameter_km: 16.84,\n      is_potentially_hazardous: false,\n      close_approach_date: '2024-Jul-28 10:00',\n      relative_velocity_kps: '5.46',\n      miss_distance_au: '0.149',\n      orbit: { semi_major_axis_au: 1.458, eccentricity: 0.222, inclination_deg: 10.829, orbital_period_days: 643.2 },\n      image_id: 'asteroid-1',\n      imageUrl: imageMap.get('asteroid-1')!.imageUrl,\n      imageHint: imageMap.get('asteroid-1')!.imageHint,\n      description: imageMap.get('asteroid-1')!.description,\n    },\n    {\n      id: 'fallback-2',\n      name: '1P/Halley',\n      type: 'Comet',\n      diameter_km: 11,\n      is_potentially_hazardous: false,\n      close_approach_date: '1986-Feb-09 20:00',\n      relative_velocity_kps: '70.56',\n      miss_distance_au: '0.417',\n      orbit: { semi_major_axis_au: 17.834, eccentricity: 0.967, inclination_deg: 162.26, orbital_period_days: 27793 },\n      image_id: 'comet-1',\n      imageUrl: imageMap.get('comet-1')!.imageUrl,\n      imageHint: imageMap.get('comet-1')!.imageHint,\n      description: imageMap.get('comet-1')!.description,\n    },\n    {\n      id: 'fallback-3',\n      name: '(101955) Bennu',\n      type: 'Asteroid',\n      diameter_km: 0.49,\n      is_potentially_hazardous: true,\n      close_approach_date: '2182-Sep-24 12:00',\n      relative_velocity_kps: '0.27',\n      miss_distance_au: '0.005',\n      orbit: { semi_major_axis_au: 1.126, eccentricity: 0.203, inclination_deg: 6.034, orbital_period_days: 436.6 },\n      image_id: 'asteroid-2',\n      imageUrl: imageMap.get('asteroid-2')!.imageUrl,\n      imageHint: imageMap.get('asteroid-2')!.imageHint,\n      description: imageMap.get('asteroid-2')!.description,\n    }\n  ];\n  return [...fallbackObjects, ...fallbackObjects.map(o => ({...o, id: `${o.id}-2`})), ...fallbackObjects.map(o => ({...o, id: `${o.id}-3`}))];\n}\n\n\nasync function getNeoData(): Promise<SpaceObject[]> {\n  const apiKey = process.env.NASA_API_KEY || 'DEMO_KEY';\n  const today = new Date();\n  const startDate = format(subDays(startOfDay(today), 7), 'yyyy-MM-dd');\n  const endDate = format(endOfDay(today), 'yyyy-MM-dd');\n  \n  const url = `https://api.nasa.gov/neo/rest/v1/feed?start_date=${startDate}&end_date=${endDate}&api_key=${apiKey}`;\n\n  try {\n    const res = await fetch(url, { next: { revalidate: 3600 } });\n    if (!res.ok) {\n      console.error(`Error fetching from NASA API: ${res.status} ${res.statusText}. Falling back to sample data.`);\n      return getFallbackData();\n    }\n    const data = await res.json();\n    const imageMap = new Map<string, ImagePlaceholder>(PlaceHolderImages.map((img) => [img.id, img]));\n    const fallbackData = getFallbackData();\n    const fallbackOrbit = fallbackData[0].orbit;\n\n    const spaceObjects: SpaceObject[] = [];\n    if (data.near_earth_objects) {\n      Object.keys(data.near_earth_objects).forEach(date => {\n        data.near_earth_objects[date].forEach((neo: any) => {\n          const approachData = neo.close_approach_data[0];\n          const diameter = neo.estimated_diameter.kilometers;\n          \n          const isComet = neo.is_sentry_object || (neo.name && (neo.name.includes('P/') || neo.name.includes('C/')));\n          let type: SpaceObject['type'] = isComet ? 'Comet' : 'Asteroid';\n\n          // For this example, let's diversify the types a bit for UI purposes\n          if (neo.id % 5 === 0) type = 'Meteoroid';\n          else if (neo.id % 10 === 0) type = 'Dwarf Planet';\n          \n          let randomImageId: string;\n          if (type === 'Comet') {\n            randomImageId = `comet-${Math.ceil(Math.random() * 2)}`;\n          } else if (type === 'Dwarf Planet') {\n            randomImageId = 'dwarf-planet-1';\n          } else if (type === 'Meteoroid') {\n            randomImageId = 'meteoroid-1';\n          } else {\n            randomImageId = `asteroid-${Math.ceil(Math.random() * 2)}`;\n          }\n          const imageData = imageMap.get(randomImageId) ?? imageMap.get('asteroid-1')!;\n\n          const orbitData = neo.orbital_data ? {\n            semi_major_axis_au: parseFloat(neo.orbital_data.semi_major_axis),\n            eccentricity: parseFloat(neo.orbital_data.eccentricity),\n            inclination_deg: parseFloat(neo.orbital_data.inclination),\n            orbital_period_days: parseFloat(neo.orbital_data.orbital_period),\n          } : fallbackOrbit;\n\n\n          spaceObjects.push({\n            id: neo.id,\n            name: neo.name,\n            type: type,\n            diameter_km: parseFloat(((diameter.estimated_diameter_min + diameter.estimated_diameter_max) / 2).toFixed(3)),\n            is_potentially_hazardous: neo.is_potentially_hazardous_asteroid,\n            close_approach_date: approachData.close_approach_date_full,\n            relative_velocity_kps: parseFloat(approachData.relative_velocity.kilometers_per_second).toFixed(2),\n            miss_distance_au: parseFloat(approachData.miss_distance.astronomical).toFixed(4),\n            orbit: orbitData,\n            image_id: randomImageId,\n            imageUrl: imageData.imageUrl,\n            imageHint: imageData.imageHint,\n            description: imageData.description,\n          });\n        });\n      });\n    }\n\n    if (spaceObjects.length === 0) {\n      console.warn('NASA API returned no objects. Falling back to sample data.');\n      return getFallbackData();\n    }\n    \n    return spaceObjects;\n  } catch (error) {\n    console.error('Failed to fetch and process NEO data. Falling back to sample data:', error);\n    return getFallbackData();\n  }\n}\n\n// This is a server component, so we can do data fetching here.\nexport default async function ExplorerPage({ searchParams }: { searchParams: { [key: string]: string | string[] | undefined } }) {\n  const objectsWithImages = await getNeoData();\n  const focusedObjectId = searchParams?.focus;\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background text-foreground\">\n      <MainView \n        initialObjects={objectsWithImages} \n        focusedObjectId={typeof focusedObjectId === 'string' ? focusedObjectId : undefined} \n      />\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}